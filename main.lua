--[[----------------------------------------------------------------------
lua 視野第一個 ... 表格,
其第1個元素表示插件名稱,
其第2個元素表示插件專屬陣列(同一個 toc內的lua 均共用此空間)
-------------------------------------------------------------------------]]
local AaddonName,AddonTable = ... 
local G = AddonTable

--[[----------------------------------------------------------------------
物件試做, 先宣告一個表格表示一個類別物件
利用其可以內含函數的特性作到物件方法的定義
-------------------------------------------------------------------------]]
mycalc = {result=0}
--[[----------------------------------------------------------------------
此方法用來讓新的物件可以繼承這個類別所有方法及屬性
利用 setmetatable(新物件, 類別物件) 及 
類別物件.__index = 類別物件 的指令來作到模擬繼承
-------------------------------------------------------------------------]]
function mycalc:new(obj)
	obj = obj or {}
	setmetatable(obj, self)
	self.__index = self
	return obj
end
--[[----------------------------------------------------------------------
-------------------------------------------------------------------------]]
function mycalc:add(n)
	n = tonumber(n)
	self.result = self.result + n
	return self.result
end
--[[----------------------------------------------------------------------
-------------------------------------------------------------------------]]
function mycalc:sub(n)
	n = tonumber(n)
	self.result = self.result - n
	return self.result
end
--[[----------------------------------------------------------------------
-------------------------------------------------------------------------]]
function mycalc:mul(n)
	n = tonumber(n)
	self.result = self.result * n
	return self.result
end
--[[----------------------------------------------------------------------
-------------------------------------------------------------------------]]
function mycalc:div(n)
	n = tonumber(n)
	if not(n == 0) then 
		self.result = self.result / n		
	end	
	return self.result	
end

--[[----------------------------------------------------------------------
-------------------------------------------------------------------------]]
function mycalc:GetResult()	
	return self.result
end
--[[----------------------------------------------------------------------
-------------------------------------------------------------------------]]
function mycalc:SetResult(n)
	self.result = tonumber(n)
	return self.result
end

--[[----------------------------------------------------------------------
local NewObj = class1:new()
NewObj.func1()
NewObj.func1()
-------------------------------------------------------------------------]]


--[[----------------------------------------------------------------------
-------------------------------------------------------------------------]]
function G:dump(tbl)
	if tbl then
		for k,v in pairs(tbl) do 
			print(k,v) 
		end
	else
		print("dump:no table exist")
	end
end
MySU = SpellUtil:New()

MySU:SetMinID(1);
MySU:SetMaxID(999999);
MySU:CreateSpellPool()
MySU:GetSpellIDGroupByName("虎掌")

--MySU:Release(mySU)